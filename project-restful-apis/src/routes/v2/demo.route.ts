import express from 'express';
import Product from '../../models/product.model';
import Staff from '../../models/staff.model';


const router = express.Router()

router.get ('', async (req, res) =>{

    //1.T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m:
//    const result = await Product.find()
//     console.log ('<<=== products ===>>', result)

    const result = await Staff.find();
    
    //2.T√¨m m·ªôt record by _id
    //const result = await Product.findById ('65f3b481063a92232722bbc1');

    //3.T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m theo danh m·ª•c
    //t∆∞∆°ng ƒë∆∞∆°ng l√† WHERE category = '65f2df7d7cb391a8fb86fbba'
    //const result = await Product.findOne ({
       // category : '65f2df7d7cb391a8fb86fbba'
    //});

    //3.T√¨m theo danh m·ª•c
    //WHERE price > 500 and stock <0
    // const result = await Product.findOne ({
    //    price: { $gt: 400 },
    //    stock: { $lt: 0}
    // })

    //4.Li·ªát k√™ c√°c tr∆∞·ªùng c·∫ßn l·∫•y
    // const result = await Product.findOne ({
    //     price: { $gt: 400 },
    //     stock: { $eq: 0}
    //  }).select ( '_id productName price discount category');

    // 5.L·∫•y t·∫•t c·∫£ ngo√†i tr·ª´ tr∆∞·ªùng _v
    // const result = await Product.find().select('-__v -updatedAt');

    //6.S·∫Øp x·∫øp ORDER BY
    // const result = await Product
    // .find()
    // .select('-__v -updatedAt')
    // .sort('-sort') //ASC, .sort('-sort') ==>DESC
    // ;
    // or
    // const result = await Product
    // .find()
    // .select('-__v -updatedAt')
    // .sort({sort: 1}); //1 ASC,  -1 DESC

    //7.Ph√¢n trang
    // const currentPage = req.query.page ? parseInt(req.query.page as string) : 1 ; //trang hi·ªán t·∫°i
    // const pageSize = req.query.limit ? parseInt(req.query.limit as string) : 5 ; //s·ªë l∆∞·ª£ng items tr√™n 1 trang
    // const result = await Product
    // .find()
    // .select('-__v -updatedAt')
    // .sort({sort: 1})
    // .skip((currentPage - 1) * pageSize)
    // .limit(pageSize);

    //8.Join c√°c collection
    // const currentPage = req.query.page ? parseInt(req.query.page as string) : 1 ; //trang hi·ªán t·∫°i
    // const pageSize = req.query.limit ? parseInt(req.query.limit as string) : 5 ; //s·ªë l∆∞·ª£ng items tr√™n 1 trang
    // const result = await Product
    // .find()
    // .select('-__v -updatedAt')
    // .sort({sort: 1})
    // .skip((currentPage - 1) * pageSize)
    // .limit(pageSize)
    // .populate('category', 'categoryName')
    // .populate('brand')
    // .lean({virtuals: true})
    
    //9.Update by _id
    //UPDATE product SET price = 1300 WHERE _id = ''
    // const result = await Product.findByIdAndUpdate(
    //     '65f3b481063a92232722bbc1',
    //     {
    //         price: 1300
    //     },
    //     {
    //         new: true,
    //     }
    //     )

    //10. Update theo mot truong cu the
    //UPDATE product SET sort = 49 WHERE sort = 50
    // const result = await Product.updateMany(
    //     {
    //         sort: 50
    //     },
    //     {
    //         sort: 49
    //     },
    //     {
    //         new: true,
    //     }
    //     )


    res.json (result)
})

export default router


/*
Mongoose Queries: https://mongoosejs.com/docs/queries.html

Model.deleteMany(): X√≥a nhi·ªÅu
Model.deleteOne(): X√≥a m·ªôt
Model.find() : T√¨m ki·∫øm nhi·ªÅu documents
Model.findById(): T√¨m ki·∫øm b·ªüi ID
Model.findByIdAndDelete(): T√¨m b·ªüi ID n·∫øu th·∫•y th√¨ X√≥a
Model.findByIdAndRemove(): T√¨m b·ªüi ID n·∫øu th·∫•y th√¨ X√≥a
Model.findByIdAndUpdate(): T√¨m b·ªüi ID n·∫øu th·∫•y th√¨ UPdate
Model.findOne(): T√¨m m·ªôt documents
Model.findOneAndDelete(): T√¨m m·ªôt documents v√† x√≥a
Model.findOneAndRemove(): T√¨m m·ªôt documents v√† x√≥a
Model.findOneAndReplace(): T√¨m m·ªôt documents v√† thay th·∫ø
Model.findOneAndUpdate(): T√¨m m·ªôt documents v√† update
Model.replaceOne(): Thay th·∫ø m·ªôt document
Model.updateMany(): Update nhi·ªÅu documents
Model.updateOne(): Update m·ªôt document
*/

/*
üî∂ T√¨m ki·ªÉu so s√°nh - Comparison
$eq: Kh·ªõp c√°c gi√° tr·ªã = v·ªõi m·ªôt gi√° tr·ªã c·ª• th·ªÉ.
$gt: Kh·ªõp c√°c gi√° tr·ªã > m·ªôt gi√° tr·ªã c·ª• th·ªÉ.
$gte: Kh·ªõp c√°c gi√° tr·ªã > = m·ªôt gi√° tr·ªã c·ª• th·ªÉ.
$in: Kh·ªõp b·∫•t k·ª≥ gi√° tr·ªã n√†o trong m·ªôt m·∫£ng gi√° tr·ªã ƒë√£ ch·ªâ ƒë·ªãnh.
$lt: Kh·ªõp c√°c gi√° tr·ªã < m·ªôt gi√° tr·ªã c·ª• th·ªÉ.
$lte: Kh·ªõp c√°c gi√° tr·ªã < = m·ªôt gi√° tr·ªã c·ª• th·ªÉ.
$ne: Kh·ªõp t·∫•t c·∫£ c√°c gi√° tr·ªã kh√¥ng b·∫±ng v·ªõi m·ªôt gi√° tr·ªã c·ª• th·ªÉ.
$nin: Kh·ªõp kh√¥ng c√≥ gi√° tr·ªã n√†o trong m·ªôt m·∫£ng gi√° tr·ªã ƒë√£ ch·ªâ ƒë·ªãnh.
*/